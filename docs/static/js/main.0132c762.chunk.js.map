{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/AttractionItem.js","components/FilterBlock.js","components/Home.js","App.js","registerServiceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","AttractionItem","attraction","website","length","href","target","rel","type","cost","FilterBlock","typesOutput","types","map","num","value","onChange","ev","onSelectionChanged","onInput","onNameInputChanged","Home","typeRestriction","nameRestriction","handleSelection","handleNameChanged","event","selectElement","nameElement","itemCount","mappedOutput","attractions","k","v","jsonAttraction","includes","concat","toLowerCase","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0132c762.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header>\r\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n          <Container>\r\n            <NavbarBrand tag={Link} to=\"/\">Melbourne Attractions</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n              <ul className=\"navbar-nav flex-grow\">\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                </NavItem>\r\n              </ul>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport class AttractionItem extends Component {\r\n    render() {\r\n        const attraction = this.props.attraction;\r\n\r\n        return (\r\n            <div className=\"attractionItem\">\r\n                <div>\r\n                    <b>Attraction:</b> {attraction.attraction}\r\n                </div>\r\n                <div>\r\n                    <b>Website:</b> {attraction.website.length === 0 ? \"No website\" : <a href={attraction.website} target=\"_blank\" rel=\"noopener noreferrer\">Click</a>}\r\n                </div>\r\n                <div>\r\n                    <b>Type:</b> {attraction.type}\r\n                </div>\r\n                <div>\r\n                    <b>Cost:</b> {attraction.cost}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nexport class FilterBlock extends Component {\r\n\r\n    render() {\r\n\r\n        let typesOutput = this.props.types.map((type, num) => {\r\n            return (\r\n                <option value={type}>\r\n                    {type.length > 0 ? type : \"All\"}\r\n                </option>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"filterBlock\">\r\n                <div>\r\n                    <span><b>Display Types: </b></span>\r\n                    <select\r\n                        onChange={(ev) => this.props.onSelectionChanged(ev)}\r\n                    >\r\n                        {typesOutput}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <span><b>Name: </b></span>\r\n                    <input\r\n                        type=\"text\"\r\n                        onInput={(ev) => this.props.onNameInputChanged(ev)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport attractions from '../data/attractions.json'\r\nimport { AttractionItem } from './AttractionItem';\r\nimport { FilterBlock } from './FilterBlock';\r\n\r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            typeRestriction: \"\",\r\n            nameRestriction: \"\",\r\n        }\r\n\r\n        this.handleSelection = this.handleSelection.bind(this);\r\n        this.handleNameChanged = this.handleNameChanged.bind(this);\r\n    }\r\n\r\n    handleSelection(event) {\r\n        let selectElement = event.target;\r\n        this.setState({\r\n            typeRestriction: selectElement.value,\r\n        });\r\n    }\r\n\r\n    handleNameChanged(event) {\r\n        let nameElement = event.target;\r\n        this.setState({\r\n            nameRestriction: nameElement.value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let types = [\"\"];\r\n        let itemCount = 0;\r\n\r\n        let mappedOutput = attractions.map((k, v) => {\r\n            var jsonAttraction = k;\r\n\r\n            if (!types.includes(jsonAttraction.type)) {\r\n                types = types.concat(jsonAttraction.type);\r\n            }\r\n\r\n            if ((this.state.typeRestriction === \"\" || jsonAttraction.type === this.state.typeRestriction)\r\n                && (this.state.nameRestriction === \"\" || jsonAttraction.attraction.toLowerCase().includes(this.state.nameRestriction.toLowerCase()))\r\n            ) {\r\n                itemCount++;\r\n                return (<AttractionItem attraction={jsonAttraction} />);\r\n            }\r\n\r\n            return \"\";\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <FilterBlock\r\n                    types={types}\r\n                    onSelectionChanged={this.handleSelection}\r\n                    onNameInputChanged={this.handleNameChanged}\r\n                />\r\n                <div>\r\n                    <b>Item Count: </b> {itemCount}\r\n                </div>\r\n                <div className=\"attractionContainer\">\r\n                    {mappedOutput}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\n\r\nimport './css/custom.css'\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render () {\r\n    return (\r\n      <Layout>\r\n        <Route exact path='/' component={Home} />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}